#Configuração do banco de dados
spring.datasource.url = jdbc:mysql://localhost:3306/db_editora_livros?createDatabaseIfNotExist=true
spring.datasource.username = root
spring.datasource.password = root
spring.jpa.hibernate.ddl-auto = update

#Configuração dos limites de tamanho de arquivo para upload de imagens
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

#Configuração do servidor de autenticação
#Google
spring.security.oauth2.client.registration.google.client-id = 215417293837-t3oe625m62nhtk02jgnh74f472te6jgs.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret = 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
#Ad
#spring.security.oauth2.client.registration.ad.client-id = 215417293837-t3oe625m62nhtk02jgnh74f472te6jgs.apps.googleusercontent.com
#spring.security.oauth2.client.registration.ad.client-secret = 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

spring.security.user.name=admin
spring.security.user.password=admin
spring.security.user.roles=Admin

#Configuração de HTTPS
#server.port: a porta em que a API será executada com HTTPS.
server.port=8443
#server.ssl.enabled: define se o SSL está habilitado ou não.
server.ssl.enabled=true
#server.ssl.key-store-type: o tipo de arquivo de armazenamento de chaves (JKS, PKCS12, etc.).
server.ssl.key-store-type=JKS
#server.ssl.key-store: o caminho para o arquivo do keystore SSL. Neste exemplo, o arquivo é armazenado na pasta resources do projeto.
server.ssl.key-store=classpath:keystore.jks
#server.ssl.key-store-password: a senha do keystore.
server.ssl.key-store-password=EditoraSENAI
#server.ssl.key-alias: o alias da chave que deve ser usada.
server.ssl.key-alias=editora
#Geração de certificado SSL
#keytool -genkey -alias editora -keyalg RSA -keystore keystore.jks -validity 3650
#editora é o alias da chave.
#keystore.jks é o nome do arquivo de keystore.
#3650 é a validade do certificado em dias (10 anos).